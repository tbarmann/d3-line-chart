<!DOCTYPE html>
<meta charset="utf-8">
<head>
  <style> /* set the CSS */
   
    body { font: 12px Arial;}
     
    .graph-svg-component {
      background-color: #212429;
      color: white;
    }

    path { 
      stroke: red;
      stroke-width: 2;
      fill: none;
    }
     
    .axis path,
    .axis line {
      fill: none;
      stroke: grey;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
   
    input[type=radio] {
      display:none;
    }

    input[type=radio] + label {
      display:inline-block;
      margin:-2px;
      padding: 4px 12px;
      margin-bottom: 0;
      font-size: 14px;
      line-height: 20px;
      color: #333;
      text-align: center;
      text-shadow: 0 1px 1px rgba(255,255,255,0.75);
      vertical-align: middle;
      cursor: pointer;
      background-color: #f5f5f5;
      background-image: -moz-linear-gradient(top,#fff,#e6e6e6);
      background-image: -webkit-gradient(linear,0 0,0 100%,from(#fff),to(#e6e6e6));
      background-image: -webkit-linear-gradient(top,#fff,#e6e6e6);
      background-image: -o-linear-gradient(top,#fff,#e6e6e6);
      background-image: linear-gradient(to bottom,#fff,#e6e6e6);
      background-repeat: repeat-x;
      border: 1px solid #ccc;
      border-color: #e6e6e6 #e6e6e6 #bfbfbf;
      border-color: rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);
      border-bottom-color: #b3b3b3;
      filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#ffe6e6e6',GradientType=0);
      filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
      -webkit-box-shadow: inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);
      -moz-box-shadow: inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);
      box-shadow: inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);
    }

    input[type=radio]:checked + label {
         background-image: none;
      outline: 0;
      -webkit-box-shadow: inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);
      -moz-box-shadow: inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);
      box-shadow: inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);
        background-color:#e0e0e0;
    }

    .period-selector label:first-of-type {
      border-radius: 3px 0 0 3px;
    }

    .period-selector label:last-of-type {
      border-radius: 0 3px 3px 0;
    }

  </style>

  <script src="http://d3js.org/d3.v3.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

</head>

<body>
  <div class="period-selector">
    <input type="radio" name="period" id="3Y" value="36">
    <label for="3Y">3Y</label>
    <input type="radio" name="period" id="2Y" value="24">
    <label for="2Y">2Y</label>
    <input type="radio" name="period" id="1Y" value="12" checked>
    <label for="1Y">1Y</label>
    <input type="radio" name="period" id="6M" value="6">
    <label for="6M">6M</label>
    <input type="radio" name="period" id="3M" value="3" >
    <label for="3M">3M</label>
  </div>

<!-- load the d3.js library --> 
 
<script>
 
function parseData(data) {
  var numberOfItems = data.length;
  var period = parseInt($("input[name='period']:checked").val());
  return data.slice(numberOfItems - period);
}


// Set the dimensions of the canvas / graph
var margin = {top: 30, right: 20, bottom: 30, left: 50},
  width = 600 - margin.left - margin.right,
  height = 270 - margin.top - margin.bottom;
 
// Parse the date / time
var parseDate = d3.time.format("%Y_%m").parse;
 
// Set the ranges
var x = d3.time.scale().range([0, width]);
var y = d3.scale.linear().range([height, 0]);
 
// Define the axes
var xAxis = d3.svg.axis().scale(x)
  .orient("bottom").ticks(5);
 
var yAxis = d3.svg.axis().scale(y)
  .orient("left").ticks(5);
 
// Define the line
var valueline = d3.svg.line()
  .x(function(d) { return x(d.date); })
  .y(function(d) { return y(d.price); });
    
// Adds the svg canvas
var svg = d3.select("body")
  .append("svg")
    .attr("class", "graph-svg-component")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 
// Get the data
d3.json("data/alum.json", function(error, rawData) {
  data = parseData(rawData);
  console.log(data);
  data.forEach(function(d) {
    d.date = parseDate(d.date);
    d.price = +d.alum;
  });
 
  // Scale the range of the data
  x.domain(d3.extent(data, function(d) { return d.date; }));
  y.domain([0, d3.max(data, function(d) { return d.price; })]);
 
  // Add the valueline path.
  svg.append("path")  
    .attr("class", "line")
    .attr("d", valueline(data));
 
  // Add the X Axis
  svg.append("g")   
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);
 
  // Add the Y Axis
  svg.append("g")   
    .attr("class", "y axis")
    .call(yAxis);
 
});
 
</script>
</body>
</html>